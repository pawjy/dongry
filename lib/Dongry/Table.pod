=head1 NAME

Dongry::Table - Database tables and rows

=head1 SYNOPSIS

  my $table = $db->table ('hoge');
  $table->create ({foo => 123, bar => 'xyz'});
  my $row = $table->find ({foo => 567});
  $row->update ({bar => 'aaa'});

=head1 DESCRIPTION

The C<Dongry::Table> module contains classes for database tables and
rows.  The table object represents a table in the database, bound to a
table schema definition.  The table row object represents a table row
in the database, bound to the schema definition for the table.  They
form the I<schema-aware> API of Dongry - a set of methods which handle
inputs and outputs in the format specifically assigned for columns in
the table (sometimes referred to as inflate/deflate feature in ORM
implementations).

=head1 METHODS OF TABLE OBJECT

The table object represents a table in some database.  The table is
bound to a database object and has a I<table name>.

A table object can be retrieved from the database object using the
C<table> method as follows:

  $table = $db->table ('table_name');

=head2 Properties

There are following accessor methods for the table object:

=over 4

=item $name = $table->table_name

Return the I<table name> for the table object.

=item $table_schema = $table->table_schema

Return the definition applied for the table in the schema specified
for the database object associated with the table object.  If no such
definition is available, C<undef> is returned instead.

=back

=head2 Insertion

There are two methods to insert rows into the table, where one is a
shorthand for the other method:

=over 4

=item $result = $table->insert ([$values1, $values2, ...], %args)

Insert one or more rows specified in the first argument to the table.
Unlike the C<insert> method of the I<database> object, the C<insert>
method of the table object serialize the given values according to the
schema definition of the table.  The C<insert> method also fills the
default values defined in the table definition.

Options C<source_name> and C<duplicate> are also applied to this
method.  See the C<insert> method of the database object for more
information.  In addition, when a I<values> hash reference is
specified as the C<duplicate> option, the I<values> is serialized as
per the table schema as well.

The rows objects accessible from the result object returned by this
method would hold both I<parsed> and I<serialized> values - the
I<parsed> values are the values specified as the argument to this
method, while the I<serialized> values are stringified representation
of them.  Both set of values would contain any default values.

See the following section on the serialization for more information on
how values are converted into SQL statements.

Example:

  $db->schema ({
    mytable1 => {
      type => {date => 'timestamp_as_DateTime'},
      default => {id => sub { return generate_unique_id () }},
    },
  });
  my $table = $db->table ('mytable1');
  my $result = $table->insert
      ([{value => 123, date => DateTime->now},
        {value => 124, date => DateTime->now->add (days => 1)}]);
  # INSERT INTO `mytable1`
  #     (`id`, `value`, `date`)
  #     VALUES (8196, 123, '2012-01-04 01:11:12'),
  #            (8197, 124, '2012-01-05 01:11:12')
  $result->each_row (sub {
    my $row = $_;
    print $row->get ('id'), "\t", $row->get ('date'), "\n";
  });

=item $row = $table->create ($values, %args)

Insert a row specified as the first argument.  This is just a
shorthand for the most common use of the C<insert> method and
therefore all consideration for the C<insert> method also applies to
this method.  Unlike the generic C<insert> method this method only
inserts a row, and receives it directly as the first argument, not as
an array reference.  In addition, this method directly returns a table
row object for the inserted row rather than generic result object.

This method applies an extract feature to flag the row object.  If you
specify a hash reference as the value of the C<flags> option to the
method, you can access them via the C<flags> method of the table row
object returned by the C<create> method.

Example:

  $db->schema ({
    mytable1 => {
      type => {date => 'timestamp_as_DateTime'},
      default => {id => sub { return generate_unique_id () }},
    },
  });
  my $table = $db->table ('mytable1');
  my $row = $table->create ({date => DateTime->now});
  # INSERT INTO `mytable1`
  #     (`id`, `date`) VALUES (124, '2012-01-04 01:11:12')
  print $row->get ('id'), "\t", $row->get ('date'), "\n";

=back

=head2 Retrieval

There are two methods to retrieve table rows.  They are not just
shorthand notation for the C<select> methods of the database object,
but they are I<schema-aware> in that values specified in the "where"
structure are interpreted per the data type definition in the table
schema.  For example, if you define the C<type> of the C<date> column
as C<timestamp_as_DateTime> (defined in L<Dongry::Type::DateTime>),
you can use a L<DateTime> object to specify the value for the C<date>
column in the "where" argument of those methods.

=over 4

=item $row = $table->find ($where, %args)

Retrieve a row from the table and return it as a table row object.

The conditions to select the row must be specified as the first
argument.  It must be a I<schema-aware> C<where> structure as
described in L<Dongry::SQL>.

If there is a row, a table row object representing the row is
returned.  Otherwise, the C<undef> value is returned.

Following options for the C<select> method of the database object also
apply to this method: C<fields>, C<group>, C<order>, C<offset>,
C<source_name>, and C<lock>.

Example:

  $date = DateTime->now->subtract (days => 2);
  my $row = $db->table ('entry')->find ({date => {-lt => $date}});

=item $list = $table->find_all ($where, %args)

Retrieve the rows from the table and return it as a list of table row
objects.

The conditions to select the row must be specified as the first
argument.  It must be a schema-aware C<where> structure as described
in L<Dongry::SQL>.

The method returns a (possibly empty) list object containing table row
objects representing the selected rows.

Following options for the C<select> method of the database object also
apply to this method: C<distinct>, C<fields>, C<group>, C<order>,
C<offset>, C<limit>, C<source_name>, and C<lock>.

Example:

  $date = DateTime->now->subtract (days => 2);
  my $list = $db->table ('entry')->find_all
      ({date => {-lt => $date}}, limit => 10);

=back

In addition, there is a shorthand method to assist optimized
resolution of so-called "has-a" or "has-many" relationships:

=over 4

=item $table->fill_related_rows ($list, {$get_method => $column, ...} => $set_method, %args)

Retrieve a set of rows related to each object in the specified list,
associated by a set of (foreign) keys.  This method could be useful
when there are primary and supplemental tables and rows in the primary
table contains keys of rows in supplemental tables, and you have a
list of objects representing the primary table rows.  Using this
method, you can retrieve supplemental table rows for them by executing
only one (or a few) SQL statement.

The first argument must be an array reference containing the objects.

The second argument must be a hash reference containing one or more
pairs of method names and column names.  Methods with the names
specified as the keys are invoked for the objects in the first
argument.  Then, the C<WHERE> clause of the SQL statement is
constructed by the column names specified as the values of the second
argument and the values obtained by the method invocations.

Table row objects representing the rows returned by the SQL execution
is passed to the objects in the first argument by invoking their
methods whose name is specified by the third argument.  When the
C<multiple> option is specified, a list object containing the table
row objects is specified as the first argument to the method.
Otherwise, a table row object, if any, or C<undef> otherwise, is
specified as the argument to the method.

Following options for the C<select> method of the database object also
apply to this method: C<fields>, C<source_name>, and C<lock>.

Example:

  CREATE TABLE `main` (
    `id` INT PRIMARY KEY,
    `sub_id` INT -- sub.id
  );
  CREATE TABLE `sub` (
    `id` INT PRIMARY KEY
  );

  # Class for $obj1, $obj2
  sub main_row { $_[0]->{main_row} }
  sub sub_id { $_[0]->main_row->get ('id') }
  sub sub_row { $_[0]->{sub_row} }
  sub set_sub_row { $_[0]->{sub_row} = $_[1] }

  $db->table ('sub')->fill_related_rows
    ([$obj1, $obj2], {'sub_id' => 'id'} => 'set_sub_row');
  # SELECT * FROM `sub` WHERE `id` IN (?, ?)
  #   ($obj1->sub_id, $obj2->sub_id)
  
  is $obj1->sub_row->get ('id'), $obj1->sub_id;
  is $obj2->sub_row->get ('id'), $obj2->sub_id;

=back

=head2 Development

There is a method for assiting development of applications using
Dongry:

=over 4

=item $string = $table->debug_info

Return a short string that might or might not be useful for debugging.

=back

=head1 METHODS OF TABLE ROW OBJECT

The table row object represents a row in the table, i.e. pairs of
column names and values bound to a specific table name in a particular
database.

Please note that what the table row object represents might or might
not be same as the table row in the actual database depending on how
the object has been created.  If the table row object is retrieved
from the result object of the C<insert> method, the table row object
is created from the argument given by the application, not from the
actual data from the database.  If the table row object is retrieved
from the result object of the C<select> method with the C<fields>
option specified, the set of columns included in the table row object
could be slightly different from those of the table.  Once the table
row is updated by a call to the C<update> method with a bare SQL
fragment object, the table row object would contain a bare SQL
fragment object as the value, rather than the result of the
modification happened at the database.  Ignoring these inconsistency
would cause your data broken, or at least it would cause your
application acting wrongly.

You can retrieve table row objects from various methods of the result
object.  Methods providing access to the row object is suffixed by
C<_as_row> or C<_as_rows>.  For more information see
L<Dongry::Database> documentation.

=head2 Properties

=over 4

=item $name = $row->table_name

The I<table name> to which the row object is bound.

=item $name = $row->table_schema

The table schema definition for the table to which the row object is
bound.  It would be same value as the C<schema> method of the table
object with the same I<table name> as the row object returns.  If no
such definition is available, C<undef> is returned instead.

=item $value = $row->flags->{$key}

=item $row->flags->{$key} = $value

Get or set an application-specific key-value pair.  The flags can also
be set by the C<create> method of the table object.

=back

=head2 Accessing values

The table row object holds two set of column values.  One is the
I<serialized value>, which is the stringified representation of column
values as used in SQL statements for the database server.  The other
is the I<parsed value>, which is in an application-specific data type
(usually a Perl object in your favorite class).  Convertion rules
between these values are assigned to columns by the C<type> hash
reference in the table schema.  If no rule is assinged for the column,
the serialized value is equal to the parsed value for its values.

Example: If a column is typed as C<text>, the serialized value is a
string of bytes, while the parsed value is a string of characters.  If
a column is typed as C<timestamp_as_DateTime> (as defined in
L<Dongry::Type::DateTime>), the serialized value is a date-time
specification in C<YYYY-MM-DD HH:MM:SS> format while the parsed value
is a Perl L<DateTime> object.

=over 4

=item $value = $row->get ($column_name)

Get the I<parsed> value for the specified column.  If the row does not
contain the column with the specified name, an error is raised.

=item $value = $row->get_bare ($column_name)

Get the serialized value (or the value in SQL) for the specified
column.  If the row does not contain the column with the specified
name, an error is raised.

=back

You are encouraged to use the C<get> method in general, but there
might also be cases the C<get_bare> method could be useful.

=over 4

=item $values = $row->primary_key_bare_values

Return the name/value pairs for the columns in the primary key for the
table, as a hash reference.  Serialized values are returned by this
method.

If no primary keys are specified in the table schema, the method would
raise an error.  If the serialized value for a column in the primary
key is missing or is C<undef>, the method would raise an error.

=item $row = $row->reload (%args)

Retrieve the current row from the database using primary key values of
the row (i.e. the values returned by the C<primary_key_bare_values>
method of the table row object) and update values of the I<current>
row object by them.

This method would raises an error if there is no longer the row for
the primary key values or there are multiple rows for the values.

Following options for the C<select> method of the database object also
apply to this method: C<source_name>, C<fields>, and C<lock>.

=back

=head2 Modifying values

=over 4

=item $row->update ($values, %args)

Set the values of columns specified to the first argument as a hash
reference of column name/value pairs.  The values are serialized
according to the schema definition of the table of the table row
object.  In place of the column value a bare SQL fragment object
(i.e. the return value of the C<bare_sql_fragment> method of the
database object) can be specified if desired.

The C<source_name> option for the C<update> method of the database
object also applies to this method.

The serialized and parsed values of the specified columns hold by the
table row object are updated to the new value.  If the bare SQL
fragment object is specified as the column value, later calls of
C<get> and C<get_bare> methods for the column would raise an error.
Likewise, once a primary key column is tainted by a bare SQL fragment
object, the C<update> method would no longer be able to update the row
and the C<reload> method would become useless as well.

Example:

  $db->schema ({table1 => {
    primary_keys => ['id'],
    type => {date => 'timestamp_as_DateTime'},
  }});
  ...
  $row->update ({date => DateTime->now, value => 120});
  # UPDATE `table1` SET `value` = 120, `date` = '2011-12-12 00:12:34'
  #     WHERE `id` = 12345

=back

=head2 Development

There is a method for assiting development of applications using
Dongry:

=over 4

=item $string = $row->debug_info

Return a hopefully short string that might or might not be useful for
debugging.

=back

=head1 SERIALIZATION OF VALUES

Methods of table and table row objects receives various arguments with
column name/value pairs, including the "where" argument of the
C<find_all> method, the "values" in the list argument to the C<insert>
method, and the "values" argument to the C<update> method.  Those
values are interpreted as per the type definition for the table before
the SQL statement is constructed.

The data type for the column is defined by the table schema for the
table.  The table schema is accessible from the C<table_schema>
method.  You cannot set the table schema directly to the table or
table row objecet, but can set to the database object by the C<schema>
method.

If the type for the column is explicitly specified, the values given
for that column is serialized using the type and then included in the
SQL statement (or used as values bound to placeholders within it).
You must specify a value that is valid for that type.  For example, if
the C<created> column is defined as C<timestamp_as_DateTime> type
(defined in L<Dongry::Type::DateTime>), you always have to set a
L<DateTime> object or an C<undef> as the value for the C<created>
column.  If the type for the column is not specified, it is
interpreted as the "byte string" type, and you have to specify a
string of bytes (i.e. a string that is not utf8-flagged) or an
C<undef> value.

For more information on types, see documentation for the
L<Dongry::Type> module.

=head1 SEE ALSO

L<Dongry::Database>.

L<Dongry::Query>.

L<Dongry::SQL>, L<Dongry::Type>.

=head1 AUTHOR

Wakaba <w@suika.fam.cx>.

=head1 LICENSE

Copyright 2011 Wakaba <w@suika.fam.cx>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
