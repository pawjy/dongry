=head1 NAME

Dongry::Table - Database tables and rows

=head1 DESCRIPTION

XXX

=head1 METHODS OF TABLE OBJECT

The table object represents a table in some database.  The table is
bound to a database object and has a I<table name>.

A table object can be retrieved from the database object using the
C<table> method as follows:

  $table = $db->table ('table_name');

=head2 Properties

There are following accessors for the table object:

=over 4

=item $name = $table->name

Return the I<table name> for the table object.

=item $table_schema = $table->schema

Return the definition applied for the table in the schema specified
for the database object associated with the table object.  If no such
definition is available, C<undef> is returned instead.

=back

=head2 Insertion

There are two methods to insert rows into the table, where one is a
shorthand for the other method:

=over 4

=item $result = $table->insert ([$values1, $values2, ...], %args)

Insert one or more rows specified in the first argument to the table.
Unlike the C<insert> method of the I<database> object, the C<insert>
method of the table object serialize the given values according to the
schema definition of the table.  The C<insert> method also fills the
default values defined in the table definition.

Options C<source_name> and C<duplicate> are also applied to this
method.  See the C<insert> method of the database object for more
information.  In addition, when a I<values> hash reference is
specified as the C<duplicate> option, the I<values> is serialized as
per the table schema as well.

The rows objects accessible from the result object returned by this
method would hold both I<parsed> and I<serialized> values - the
I<parsed> values are the values specified as the argument to this
method, while the I<serialized> values are stringified representation
of them.  Both set of values would contain any default values.

See the following section on the serialization for more information on
how values are converted into SQL statements.

Example:

  $db->schema ({
    mytable1 => {
      type => {date => 'timestamp_as_DateTime'},
      default => {id => sub { return generate_unique_id () }},
    },
  });
  my $table = $db->table ('mytable1');
  my $result = $table->insert
      ([{value => 123, date => DateTime->now},
        {value => 124, date => DateTime->now->add (days => 1)}]);
  $result->each_row (sub {
    my $row = $_;
    print $row->get ('id'), "\t", $row->get ('date'), "\n";
  });

=item $row = $table->create ($values, %args)

Insert a row specified as the first argument.  This is just a
shorthand for the most common use of the C<insert> method and
therefore all consideration for the C<insert> method also applies to
this method.  Unlike the generic C<insert> method this method only
inserts a row, and receives it directly as the first argument, not as
an array reference.  In addition, this method directly returns a table
row object for the inserted row rather than generic result object.

This method applies an extract feature to flag the row object.  If you
specify a hash reference as the value of the C<flags> option to the
method, you can access them via the C<flags> method of the table row
object returned by the C<create> method.

Example:

  $db->schema ({
    mytable1 => {
      type => {date => 'timestamp_as_DateTime'},
      default => {id => sub { return generate_unique_id () }},
    },
  });
  my $table = $db->table ('mytable1');
  my $row = $table->create ({date => DateTime->now});
  print $row->get ('id'), "\t", $row->get ('date'), "\n";

=back

XXX

=head1 METHODS OF TABLE ROW OBJECT

The table row object represents a row in the table, i.e. pairs of
column names and values bound to a specific table name in a particular
database.

Please note that what the table row object represents might or might
not be same as the table row in the actual database depending on how
the object has been created.  If the table row object is retrieved
from the result object of the C<insert> method, the table row object
is created from the argument given by the application, not from the
actual data from the database.  If the table row object is retrieved
from the result object of the C<select> method with the C<fields>
option specified, the set of columns included in the table row object
could be slightly different from those of the table.  Once the table
row is updated by a call to the C<set> method with a bare SQL fragment
object, the table row object would contain a bare SQL fragment object
as the value, rather than the result of the modification happened at
the database.  Ignoring these inconsistency would cause your data
broken, or at least it would cause your application acting wrongly.

You can retrieve table row objects from various methods of the result
object.  Methods providing access to the row object is suffixed by
C<_as_row> or C<_as_rows>.  For more information see
L<Dongry::Database> documentation.

=head2 Properties

=over 4

=item $name = $row->table_name

The I<table name> to which the row object is bound.

=item $name = $row->table_schema

The table schema definition for the table to which the row object is
bound.  It would be same value as the C<schema> method of the table
object with the same I<table name> as the row object returns.  If no
such definition is available, C<undef> is returned instead.

=item $value = $row->flags->{$key}

=item $row->flags->{$key} = $value

Get or set an application-specific key-value pair.  The flags can also
be set by the C<create> method of the table object.

=back

=head2 Accessing values

XXX

=head2 Modifying values

XXX

=head1 SERIALIZATION OF VALUES

XXX

=head1 AUTHOR

Wakaba <w@suika.fam.cx>.

=head1 LICENSE

Copyright 2011 Wakaba <w@suika.fam.cx>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
