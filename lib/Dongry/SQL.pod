=head1 NAME

Dongry::SQL - SQL construction functions for Dongry

=head1 SYNOPSIS

  use Dongry::SQL;
  $quoted_identifier = quote $string;
  $like = '%' . (like $string) . '%';
  $fields = fields ['column1', 'column2'];
  $where = where {column1 => $value1, column2 => {-lt => $value2}};
  $order = order [column1 => 1, column2 => -1];

=head1 DESCRIPTION

The C<Dongry::SQL> module defines functions to construct components of
SQL statements.  They are called by various methods of Dongry modules.

=head1 FUNCTIONS

The following functions are exported by default when the module is
C<use>d:

=over 4

=item $quoted_identifier = quote $string

Quote the string by C<`> characters and escape any C<`> character in
the given string such that the given string can be interpreted as an
SQL identifier.

=item $like = like $string

Escape metacharacters in C<LIKE> comparison (i.e. C<%>, C<_>, and
C<\>) in the given string.

=item $fields = fields $field_specification

Compose the "fields" portion of the C<SELECT> statement.

The argument must be the "fields" struct, i.e. one of the following
values:

=over 4

=item - C<undef>

If the value is not defined, all columns, i.e. C<*>, is assumed.

=item - String

If a string is specified, that is considered as a column name.

=item - Bare SQL fragment object

If a bare SQL fragment object (returned by the C<bare_sql_fragment>
method of the database object) is specified, the specified string is
used as is.

=item - Hash reference

A hash reference with key/value pairs are converted to function calls
whose function name is specified by the key and the argument is
specified by the value.

Following functions are available:

=over 4

=item -count => fields-struct

The SQL C<COUNT()> function.  The argument value is given by the
"fields" struct specified as the value.  Options C<as> and C<distinct>
apply to this function.

=item -min => fields-struct

The SQL C<MIN()> function.  The argument value is given by the
"fields" struct specified as the value.  Options C<as> and C<distinct>
apply to this function.

=item -max => fields-struct

The SQL C<MAX()> function.  The argument value is given by the
"fields" struct specified as the value.  Options C<as> and C<distinct>
apply to this function.

=item -sum => fields-struct

The SQL C<SUM()> function.  The argument value is given by the
"fields" struct specified as the value.  Options C<as> and C<distinct>
apply to this function.

=item -date => column-name

The SQL C<DATE()> function.  The column name used as the argument
value must be specified as the value.  Options C<as> and C<delta>
apply to this function.

=item -x => column-name

The SQL C<ST_X()> function.  The column name used as the argument
value must be specified as the value.  Option C<as> applies to this
function.

=item -y => column-name

The SQL C<ST_Y()> function.  The column name used as the argument
value must be specified as the value.  Option C<as> applies to this
function.

=item -distance => column-name, lat => number, lon => number

Geographical distance between the location represented by a
C<GEOMETRY> column and the specified location.  It is a shorthand of
SQL function C<< ST_Length(ST_GeomFromText(CONCAT('LineString(lon
lat,', X(column), ' ', Y(column),')'))) >>, where I<lat> and I<lon>
are values for keys C<lat> and C<lon>, representing the location by
its latitude and longitude as decimal fractional numbers, and
I<column> is the value for the key C<-distance>.  Options C<lat> and
C<lon> must be specified.

=item -column => column-name

The column whose name is specified as the value.  Option C<as> applies
to this function.  Without the C<as> option, this is equivalent to
just specifying the colum name as a string (not within a hash
reference).

=back

In addition to the function name/value pair, following options can be
specified in the hash reference:

=over 4

=item as => name

Define the alias name for the value (in SQL, C<... AS name>).

=item distinct => boolean

Add the C<DISTINCT> keyword in the function argument (in SQL,
C<function(DISTINCT args)>).

Note that this parameter cannot be specified when the C<-column>
parameter is specified.

=item delta => seconds

Add the specified numbers of seconds to the argument (in SQL,
C<DATE(args + INTERVAL delta SECOND)>).  This option only applies to
the C<-date> function.

=back

Options C<lat> and C<lon> only apply to C<-distance>, as described
above.

=item - Array reference

These values can be combined as an array reference, to combine one or
more of those values.

=back

Examples:

  [undef, 'c1']                   # *, `c1`
  [{-count => undef}, 'c1', 'c2'] # COUNT(*), `c1`, `c2`
  [{-count => 'c1',
    as => 'c',
    distinct => 1}]               # COUNT(DISTINCT `c1`) AS `c`

=item $where = where $where_specification [, $table_schema]

Compose the C<WHERE> clause of an SQL statement.  It does not include
the C<WHERE> keyword itself.

The first argument must be specified.  It represents the generated
C<WHERE> clause.  The second argument, if specified, must be a table
schema, as described in the L<Dongry::Database> documentation.  If the
table schema is specified, the function operates in a I<schema-aware>
way.  Otherwise, the function operates in a I<schema-unaware> way.  If
it is schema-aware, the column values are serialized as described in
the L<Dongry::Table> documentation before being part of an SQL
statement.

The first argument must be a "where" struct, which must be one of the
following values:

=over 4

=item - Hash reference

If a hash reference is specified, it must contain a key/value pair.

The key is interpreted as the column name.

If the value is not a hash reference, it is equivalent to specifying a
hash reference whose key is C<-eq> and whose value is the specified
value.

If the value is a hash reference, it must contain one or more
key/value pairs where a key is one of the following values:

=over 4

=item C<-eq> or C<==>

If the value is C<undef>, the entire key/value pair represents the SQL
expression C<column IS NULL> where I<column> is the column name.

Otherwise, the entire key/value pair represents the SQL expression
C<column = ?> where I<column> is the column name and I<?> is the
value.

=item C<-ne>, C<-not>, or C<!=>

If the value is C<undef>, the entire key/value pair represents the SQL
expression C<column IS NOT NULL> where I<column> is the column name.

Otherwise, the entire key/value pair represents the SQL expression
C<column != ?> where I<column> is the column name and I<?> is the
value.

=item C<-lt> or C<< < >>

The entire key/value pair represents the SQL expression C<< column < ?
>> where I<column> is the column name and I<?> is the value.

=item C<-le> or C<< <= >>

The entire key/value pair represents the SQL expression C<< column <=
? >> where I<column> is the column name and I<?> is the value.

=item C<-gt> or C<< > >>

The entire key/value pair represents the SQL expression C<< column > ?
>> where I<column> is the column name and I<?> is the value.

=item C<-ge> or C<< >= >>

The entire key/value pair represents the SQL expression C<< column >=
? >> where I<column> is the column name and I<?> is the value.

=item C<-like>

The entire key/value pair represents the SQL expression C<column LIKE
?> where I<column> is the column name and I<?> is the value.

=item C<-prefix>

The entire key/value pair represents the SQL C<LIKE> expression for
the column where the condition is that it starts by the value.

=item C<-suffix>

The entire key/value pair represents the SQL C<LIKE> expression for
the column where the condition is that it ends by the value.

=item C<-infix>

The entire key/value pair represents the SQL C<LIKE> expression for
the column where the condition is that it contains the value.

=item C<-regexp>

The entire key/value pair represents the SQL expression C<column
REGEXP ?> where I<column> is the column name and I<?> is the value.

=item C<-in>

The entire key/value pair represents the SQL expression C<column IN
(?, ?, ..., ?)> where I<column> is the column name.  The value must be
an array reference or a blessed array reference containing the column
values for the C<(?, ?, ..., ?)> portion.  It must not be empty.

=item C<-not_in>

The entire key/value pair represents the SQL expression C<column NOT
IN (?, ?, ..., ?)> where I<column> is the column name.  The value must
be an array reference or a blessed array reference containing the
column values for the C<(?, ?, ..., ?)> portion.  It must not be
empty.

=back

If more than one keys from the list above is specified, they are
concatenated by the C<AND> operator.

Column values are interpreted in schema-aware ways if a table schema
is given to the function.

Examples:

  {foo => 'bar'}                   # `foo` = 'bar'
  {foo => {-ne => undef}}          # `foo` IS NOT NULL
  {foo => {-prefix => '40%'}}      # `foo` LIKE '40\%%'
  {foo => {-in => ['abc', 'def']}} # `foo` IN ('abc', 'def')
  {foo => {-gt => 20, -lt => 100}} # `foo` > 20 AND `foo` < 100

=item - Array reference

If an array reference is specified, it must be a fragment of the SQL
statement with named placeholders followed by zero or more key/value
pairs.  It represents the SQL statement whose placeholders are
replaced by the key/value pairs.

The SQL statement with I<named placeholders> is a string that can
contain the following syntax:

=over 4

=item :I<key>

Replaced by the value of the key/value pair whose key is equal to
I<key>.  It is interpreted as an SQL quoted string.

If the value is an array reference, it is expanded as comma-separated
values.

If the table schema is available, the value is interpreted as the
value for the column whose name is equal to I<key>.

=item I<column> I<operator> ?

Equivalent to C<< I<column> I<operator> :I<column> >>.

The I<operator> must be one of the following SQL operators: C<=>, C<<
<= >>, C<< < >>, C<< > >>, C<< >= >>, C<< <> >>, C<!=>, or C<< <=> >>.

=item :I<key>::I<column>

Replaced by the value of the key/value pair whose key is equal to
I<key>.  It is interpreted as an SQL quoted string.

If the value is an array reference, it is expanded as comma-separated
values.

If the table schema is available, the value is interpreted as the
value for the column whose name is equal to I<column>.

=item :I<key>:id

Replaced by the value of the key/value pair whose key is equal to
I<key>.  It is interpreted as an SQL identifier.

Since Dongry does not support non-ASCII identifiers, the value must be
an unflagged ASCII-only string.

=item :I<key>:keyword

Replaced by the value of the key/value pair whose key is equal to
I<key>.  It is interpreted as an SQL reserved word.  The value must be
a string that only contains ASCII latin letters, digits, and C<_> and
it must start with an ASCII latin letters.

=item :I<key>:sub

Replaced by the value of the key/value pair whose key is equal to
I<key>.  It is interpreted as an SQL expression.  The value must be a
"where" construct.

=item :I<key>:optsub

Replaced by the value of the key/value pair whose key is equal to
I<key>.  It is interpreted as an SQL expression.  The value must be a
valid "where" construct, or an empty hash reference.  If the value is
an empty hash reference, SQL expression C<1 = 1>, which is always
evaluated as true, is inserted instead.

=item :I<key>:nullable

If the value of the key/value pair whose key is equal to I<key> is a
non-C<undef> value, it is interpreted in the same way as C<< :I<key>
>>.  If the value is C<undef>, it is replaced by an SQL C<NULL> value.

=back

Please note that Dongry does not assure the output is a (fragment of)
valid SQL statement.  The application must specify a string with
key/value pairs that would be result in a valid SQL statement.

Examples:

  ['foo = :foo OR bar = :bar',  # foo = 'abc' OR bar = 'def'
   foo => 'abc', bar => 'def']
  ['foo = ?', foo => 'abc']     # foo = 'abc'

  ['foo IN (:foo)', foo => ['v1', 'v2']] # foo IN ('v1', 'v2')

  $lang = 'en';
  [':namecol:id = :name',       # `name_en` = 'abc'
   namecol => 'name_' . $lang,
   name => 'abc']
  
  # (`created` is of 'timestamp_as_DateTime'
  #  and $date1 and $date2 are DateTime objects)
  [':created1::created <= created AND
   created <= :created2::created',
   created1 => $date1, created2 => $date2]      
      # ? <= created AND created <= ?
      # with serialized $date1, $date2
  
  [':cond1:sub OR :cond2:sub',   
   cond1 => {foo => 1, bar => 2},
   cond2 => {foo => 2, bar => 1}]
      # (`foo` = '1' AND `bar` = '2') OR
      # (`foo` = '2' AND `bar` = '1')

  $hoge = {hoge => 1} if $cond;
  [':hoge:optsub AND fuga = 2', hoge => $hoge]
      # If $cond is true:  `hoge` = 1 AND fuga = 2
      # If $cond is false: (1 = 1) AND fuga = 2

=back

=item $order = order $order_specification

Compose the C<ORDER BY> clause of an SQL statement.  It does not
include the C<ORDER BY> keywords themselves.

The argument must be an "order" struct.  It must be specified as an
B<array> reference containing name/value pairs, where names represent
column names and values represent their sort orders.  The values must
be either C<ASC>, C<asc>, or C<1> (ascending order) or C<DESC>,
C<desc>, or C<-1> (descending order).

Examples:

  [col1 => 1, col2 => -1]          # `col1` ASC, `col2` DESC
  [col1 => 'ASC', col2 => 'DESC']  # `col1` ASC, `col2` DESC

=item $order_specification = reverse_order_struct $order_specification

Return an "order" struct that represents the reversed order of the
"order" struct given as the argument.  This function is not
destructive and a new "order" struct is returned.

=back

As a general rule, these methods accept both utf8-flagged and
utf8-unflagged strings.  However, they must not be appear in the same
function call.  If the input is utf8-flagged, the output will also be
utf8-flagged.  If the input is unflagged, the output will be
unflagged, either.  For more information on how Dongry handles the
utf8 flag, see L<Dongry::Database> documentation.

These methods try to construct a valid SQL fragment as far as
possible, but they does not output a valid fragment for every input.
For example, if the input contains a U+0000 NULL character, the output
will also contain it.  If the input contains an unflagged broken UTF-8
sequence, functions preserve them as is.  This limitation would not be
problem in most situations as serving an untrusted value as (say) a
column name is uncommon and even when it happens it will simply cause
an SQL parse error and is not believed to make any vulnerablility by
itself.

=head1 SUPPORTED SYNTAX

This module only supports SQL dialect for MySQL version 5.

=head1 SEE ALSO

L<Dongry::Database>.

=head1 ACKNOWLEDGEMENTS

Some of features are inspired by L<SQL::Abstract>,
L<SQL::NamedPlaceholder>, and L<DBIx::MoCo>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2011-2022 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
